
services:
  # RabbitMQ Service with Health Check
  rabbitmq:
    image: "rabbitmq:3"
    networks:
      - mynetwork
    restart: always
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]  # Check if RabbitMQ is ready
      interval: 10s  # Check every 10 seconds
      retries: 5  # Retry 5 times if it fails
      start_period: 30s  # Wait for 30 seconds before the first check
      timeout: 20s  # Timeout after 20 seconds if the health check fails

  # MongoDB Service for Booking DB
  bookingdb:
    image: "mongo:6"
    volumes:
      - bookingdata:/data/db
    networks:
      - mynetwork

  # MongoDB for Patient DB
  patientdb:
    image: "mongo:6"
    volumes:
      - patientdata:/data/db
    networks:
      - mynetwork

  # MongoDB for Dentist DB
  dentistdb:
    image: "mongo:6"
    volumes:
      - dentistdata:/data/db
    networks:
      - mynetwork

  # Timeslot Service
  timeslot:
    build:
      context: ./coreServices/TimeslotsService
    volumes:
    - ./coreServices/TimeslotsService:/app  # Bind local code to /app
    depends_on:
      rabbitmq:
        condition: service_healthy  # Wait until RabbitMQ is healthy
      bookingdb:
        condition: service_started  # Wait until the database is started
    ports:
      - "3003:3003"
    environment:
      - BOOKING_DB_URI=mongodb://bookingdb:27017/booking-database
    networks:
      - mynetwork

  # Office Service
  office:
    build:
      context: ./coreServices/OfficesService
    depends_on:
      rabbitmq:
        condition: service_healthy  # Wait until RabbitMQ is healthy
      bookingdb:
        condition: service_started  # Wait until the database is started
    ports:
      - "3005:3005"
    environment:
      - BOOKING_DB_URI=mongodb://bookingdb:27017/booking-database
    networks:
      - mynetwork

  # User Management Service
  usermanagement:
    build:
      context: ./coreServices/userManagementService
    depends_on:
      rabbitmq:
        condition: service_healthy  # Wait until RabbitMQ is healthy
      patientdb:
        condition: service_started  # Wait until the patient DB is started
      dentistdb:
        condition: service_started  # Wait until the dentist DB is started
    ports:
      - "3004:3004"
    environment:
      - PATIENT_DB_URI=mongodb://patientdb:27017/patient-database
      - DENTIST_DB_URI=mongodb://dentistdb:27017/dentist-database
    networks:
      - mynetwork

  # Client Service
  client:
    build:
      context: ./client
    ports:
      - "5173:5173"
    networks:
      - mynetwork

  # API Gateway Service
  apigate:
    build:
      context: ./APIGateway
    depends_on:
      rabbitmq:
        condition: service_healthy  # Wait until RabbitMQ is healthy
    ports:
      - "4000:4000"
    networks:
      - mynetwork

# Define the networks
networks:
  mynetwork:
    external: true

# Define the volumes
volumes:
  patientdata:
  dentistdata:
  bookingdata: